#!/usr/bin/env python3
'''
Date : 1401/12/27
Author : AmirhosseinKhanshabani - @AmirZoyber

Description: Python Generators provides a simple way of creating iterators. All the work we mentioned above are automatically handled by generators in Python. Simply speaking, a generator is a function that returns an object (iterator) which we can iterate over (one value at a time).
             with yield keyword we can create a generator function. the local variable will not destroyed after the function call. it will be destroyed when the generator is exhausted.
'''

def gen_demo():
    n=1
    yield n
    n+=1
    yield n
    n+=1
    yield n

def generator_func():
    for i in range(10):
        yield i

test = gen_demo()
print(test) # <generator object gen_demo at 0x7f9b8c0b9f50>

print(next(test)) # -> 1
print(next(test)) # -> 2
print(next(test)) # -> 3
# print(next(test)) # -> StopIteration

test2 = gen_demo()
for a in test2:
    print(a)    # ->  1 
                # ->  2 
                # ->  3

def xor_static_key(key): # xor a string with a static key
    key = 0x5
    for i in a:
        yield chr(ord(i) ^ key)

for i in xor_static_key("test"): 
    print(i)    # -> 0x5
                # -> 0x0
                # -> 0x7
                # -> 0x0
                # -> 0x5



xor_static_key2 = (chr(ord(i) ^ 0x5) for i in "test")
print(xor_static_key2) # <generator object <genexpr> at 0x7f9b8c0b9f50>
print(next(xor_static_key2)) # -> 0x5
print(next(xor_static_key2)) # -> 0x0
#or
for i in xor_static_key2:
    print(i)    # -> 0x7
                # -> 0x0
                # -> 0x5




# we can use generator functions to create infinite sequences
# we can create anonymous generator functions using lambda
