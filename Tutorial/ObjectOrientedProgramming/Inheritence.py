#!/usr/bin/env python3
'''
Date : 1402/01/01
Author : AmirhosseinKhanshabani - @AmirZoyber
 Python Inheritence
'''

class Person:
    'Bonjol Bazar'
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def myfunc(self):
        print(f"Hello my name is {self.name} and i am {self.age} years old.")

class hacker(Person):
    def __init__(self, name, age, cves):
        super().__init__(name, age)
        self.cves = cves
    
    def myfunc(self):
        print(f"Hello my name is {self.name} and i am {self.age} years old and I have {self.cves} CVEs.")

amir = Person("Amir", 20)
ali = hacker("Ali", 30, 100)


amir.myfunc() # output : Hello my name is Amir and i am 20 years old.
ali.myfunc() # output : Hello my name is Ali and i am 30 years old and I have 100 CVEs.

print(amir.age) # output : 20
print(ali.age) # output : 30

'''
if we have a class named Person, which has a method named myfunc(), then we can create another class named hacker, which inherits the Person class, and we can use the myfunc() method in the hacker class.
    if we have a def in parent class, and we have a def with the same name in the child class, the child's def will override the parent's def.
    if we want to keep the parent's def, we can use the super() function to keep the parent's def.
if we have a def in parent class, we can call it in the child class by using the super() function.
'''

print(issubclass(hacker, Person)) # output : True
print(isinstance(Person, hacker)) # output : False

print(isinstance(amir, hacker)) # output : False
print(isinstance(amir, Person)) # output : True

print(isinstance(ali, hacker)) # output : True
print(isinstance(ali, Person)) # output : True



