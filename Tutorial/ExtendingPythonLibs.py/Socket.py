#!/usr/bin/env python3
'''
Date : 1402/01/07
Author : AmirhosseinKhanshabani - @AmirZoyber
 
socket is a module that provides access to the BSD socket interface.
it is used for network communication.
its functions are used to create sockets, bind sockets to addresses, and connect to other sockets.
it also provides various constants that are used by the other socket functions.
socket is pre installed in python3.
'''

import socket

ip = socket.gethostbyname("www.google.com")
print(ip)   # it prints the ip address of www.google.com

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # it creates a socket object that supports the context manager type

s.connect((ip, 80)) # it connects to the socket
s.sendall(b"HEAD / HTTP/1.1\r\nHost: www.google.com\r\n\r\n") # it sends data or a packet to the socket
print(s.recv(1024).decode()) # it receives data from the socket
s.close() # it closes the socket

client = False
server = True
port = 8080
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # it creates a socket object that supports the context manager type


'''making a server and a client using socket'''
if server:
    s.bind(("127.0.0.1", port)) # it binds the socket to 127.0.0.1:8080
    s.listen(1) # it listens for connections made to the socket
    
    while True:
        connect, addr = s.accept() # it accepts a connection
        print("Connected by", addr) # it prints the address of the connected socket
        connect.close() # it closes the socket

if client:
    s.connect(("127.0.0.1", port)) # it connects to the socket
    print(s.recv(1024).decode()) # it receives data from the socket
    s.close() # it closes the socket


'''port scanner'''
for port in [22,80,443,8080,3390]:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # it creates a socket object that supports the context manager type
    s.setdefaulttimeout(1) # it sets the default timeout value of the socket
    result = s.connect_ex(("127.0.0.1", port)) # it connects to the socket
    if result == 0:
        print("[+] Port {} is open".format(port))
    else:
        print("[-] Port {} is closed".format(port))
    s.close() # it closes the socket