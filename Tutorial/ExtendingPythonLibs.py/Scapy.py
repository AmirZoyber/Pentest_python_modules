#!/usr/bin/env python3
'''
Date : 1402/01/08
Author : AmirhosseinKhanshabani - @AmirZoyber
 
scapy is a python module that is used for packet manipulation.
it is used for network discovery, scanning, fingerprinting, and much more.
it is used to send and receive packets.
you can install it using pip3 install scapy.
    pip3 install scapy
'''

from scapy.all import *

ip_layer = IP(dst="www.google.com") # it creates an ip layer
icmp_layer = ICMP()
packet = ip_layer/icmp_layer # it creates a packet
packet.show() # it shows the packet
r = send(packet) # it sends the packet

wireshark(packet) # it shows the packet in wireshark

ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst="192.168.1.10/24"),timeout=3, verbose=False)
for i in ans:
    print(i[1].src) # it prints the ip address of the connected devices
    print(i) # it prints the packet

SYN = 0x02
ACK = 0x10
RST = 0x04
FIN = 0x01

'''port scanner'''
for port in [22,80,443,8080,3390]:
    tcp_connect = sr19(IP(dst="127.0.0.1")/TCP(sport=RandShort(), dport=port, flags="S"), timeout=1, verbose=False)
    if tcp_connect and tcp_connect.haslayer(TCP):
        responseFlags = tcp_connect.getlayer(TCP).flags
        if responseFlags == (SYN + ACK):
            sndRst = send(IP(dst="127.0.0.1")/TCP(sport=RandShort(), dport=port, flags="AR"), verbose=False)
            print("[+] Port {} is open".format(port))
        elif responseFlags == (RST+ACK):
            print("[-] Port {} is closed".format(port))
    else:
        print("[-] Port {} is closed".format(port))


'''sniffer'''
from scapy.layers.http import HTTPRequest

def process(packet):
    if packet.haslayer(HTTPRequest):
        print(packet.show())

sniff(iface="eth0", filter="tcp port 80", prn=process) # it sniffs the packets

scapyCap = rdpcap("scapy.pcap") # it reads a pcap file
for packet in scapyCap:
    if packet.haslayer(HTTPRequest):
        print(packet.show())