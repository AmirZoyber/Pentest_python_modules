#!/usr/bin/env python3
'''
Date : 1402/01/08
Author : AmirhosseinKhanshabani - @AmirZoyber
 
Pycryptodome

'''
from Crypto.Random import get_random_bytes
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from Crypto.Cipher import ARC4
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Hash import SHA512

key = get_random_bytes(32)
print(key) # b'\xbb\xbf\xd0\xee\xd8\xf4\x14\xc2\xe1\xba\xf4\xbcq1 \x99\xc6\xd7\xe2\xa3\x8b\x86\x01\x11\\\xfb\\\xa7\xd8\xec#0'
print(len(key)) # 32

salt = get_random_bytes(32)
salt =  b'\xbb\xbf\xd0\xee\xd8\xf4\x14\xc2\xe1\xba\xf4\xbcq1 \x99\xc6\xd7\xe2\xa3\x8b\x86\x01\x11\\\xfb\\\xa7\xd8\xec#0'
password = "hunter2"
key = PBKDF2(password, salt, dkLen=32)
print(key) # b'\xfe\xe2\x8b(c\xd7\xe1\xe8\xc6\x1b\x86\xd8\x06\xb3DO\x82\x15:\xdab\xb7%\x7f\xbe\xa8\xc5U}8^p'
print(len(key)) # 32

'''AES encryption'''
toEncrypt = b'Encrypt me!'
cipher = AES.new(key, AES.MODE_CBC)
print(cipher.iv) # b'\xe5\x8c\x92>|\x1d[\x9c\xa3\x0f6\x12\x9a\xa6\xa5c'
cipherData = cipher.encrypt(pad(toEncrypt, AES.block_size))
print(cipherData) # b'Y\xa1]\x80\x7f\x0b\xb1\x00\xf3L\x7fJ\x07\x03\x93\xc5'

cipher = AES.new(key, AES.MODE_CBC, iv=cipher.iv)
plaintextData = cipher.decrypt(cipherData)
print(plaintextData) # b'Encrypt me!\x05\x05\x05\x05\x05'

'''ARC4 Encryption'''
cipher = ARC4.new(key)
encrypted = cipher.decrypt(toEncrypt)
print(encrypted) # b'm\xb4ZjA\xabi\xe3xFI'

cipher = ARC4.new(key)
plaintext = cipher.decrypt(encrypted)
print(encrypted) # b'm\xb4ZjA\xabi\xe3xFI'

'''RSA encryption'''
key = RSA.generate(1024)
encryptedKey = key.exportKey(passphrase=password)

print(encryptedKey) # b'-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: DES-EDE3-CBC,407B7DA44E7102C8\n\nFxRk+02xrrgr7vpTKWOYicWwlyQOHe2uCknkEsuZeYpFm/dfNY+mUhhIpT+vWkjF\nFf5kf5QSsG/I0u7g7YxWQBQJG8z94/fZSEfX6HqOW5hQIzuEw9+E8EuLX934Sa0a\nBO+RiJeGTBinjynTg5rwJQq5POMCDe+/QiWAYNam8IzcVoIO1F6n2v1l1QJmN2Ql\npXbb224Wj1GlVMys818zzhtZ05ELHsMfNUEtW0g6doTBxXddAIYIeAB5KMXTZY4o\nhfYUjoDEOVrDXxAbXipd9UltWQfZQMuvWH+yUiBieGsOSgHVZ5NOiyCgsFLT+9uU\nzIGvfZVAZ6jUCzbVxnqBMfXRxiYISShMss1U7rTyQP+5O8VQYPG+5yVxVihTuxgF\npAmQs+rC3Jji1N5ltLyATahz6W4YFnztTmC7XbSQ355G4h+2ijctkU3DIFUgM0T4\nRyzsuGKDvW1V6piMvqxUTWWJ5V6CA9H0L1zV0X+SA0sWpO4+3topnR5h8KlKY+Jf\nlUmLPk6OLzwC+tduxTpOow9WJUOyOCG92VVfCY3h3PvO0Sf+F1hskhlg53I3dHfS\nHtMuP/fdVRsqvhrb8vHZEsYYwTVeXlDIPl/BH577hRiHToyqtUZ0dYu46DvIh+sB\nlTh52CWi7vtyZ7maC6VXEvqnoSRNwsr0ht1A0s8xQZ99qx8B57AsOh349UZlDJqp\nrAjvio0ek+gg4ljLdgzmDjX6TGK7VqNDWmCgklEs3oxsr7FgAWsfJyWDs08xrKuL\nmxVnX6XAe0YvpNrgKCYfP3vtHDIk1ln67bzxXJDmtjG7EeREyvv0xw==\n-----END RSA PRIVATE KEY-----'

pub = key.publickey()
print(pub.exportKey()) # b'-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcxGiJUhbNO2dcGwN/H67rUVLv\npLJl9k4kS3w0HDSrACIYe4OMOvHJkmSV3MoqFwhUVn3BR7vnSn4omf/qyFyeU+Sz\nXHcXCZ9e5GjRJHbV14Ua6oRGn0UMQ9F2Ty5tR0EWgvtYlivTL370CIMby8Al/lSz\n6re64Dkif+eJq9PNlQIDAQAB\n-----END PUBLIC KEY-----'

print(key.can_encrypt()) # True
print(key.can_sign()) # True
print(key.has_private()) # True
print(pub.has_private()) # False

'''PKCS1_0AEP'''
toEncrypt = b"Encrypt me!"
cipher = PKCS1_OAEP.new(pub)
encrypted = cipher.encrypt(toEncrypt)
print(encrypted) # b'\xb40k\x8aS\x83\xafA-\xbc\xde\x12\x0eoL#\xe2\xc5\x0c\xb0\x18\x97\xb1{a\xd8M>\x15\xf7\n\x1b\xeb\x0c\x84<Y\x9e\x96\xdf\xc8\xb4\xa0EI\x81\x0c\xb7\xbdp\xc3"\x81V\xb0\xa0&\x80*\xa93\x92H\xf9\xb2<\xe3UG\x16e#E\x05\x13\x1b@\xb6\xcb;7\xd9\xa7\xc5\xde;2\xc6a\x91\x94t\x18\x8c\xc6:\xd1\xae\x87\x10\xd4\xc8N\xc7\x97\x1aJ\xe22WA\x13\xec\xb1\xf6*2`\xc8*\xd5\xf6\x97\xb4\x1a\xe9|\x96'

cipher = PKCS1_OAEP.new(key)
plaintext = cipher.decrypt(encrypted)
print(plaintext) # b'Encrypt me!'

'''Hash SHA512'''
plainHash = SHA512.new(toEncrypt).digest()
hashed = int.from_bytes(plainHash, byteorder='big')
print(hashed) # 5723898997073921703421889495960607050608624796003589511895111070846341684217067243550977047124646881095275709475246632753795049656562811637344182716880525

signature = pow(hashed, key.d, key.n)
print(f"Signature : {signature}") # Signature : 82390954327703576632692222023508302430021221129266388786148167539541198597663842600009704598704233401275342530786848642454569901661814368850579623399849638692159923324649902275122330785846994275283212516698197323226172097887677311203862211901242512949827965243758308083218975816022206294262897475761789798726

signatureHash = pow(signature, key.e, key.n)
print(signatureHash) # 5723898997073921703421889495960607050608624796003589511895111070846341684217067243550977047124646881095275709475246632753795049656562811637344182716880525
print(hashed==signatureHash) # True