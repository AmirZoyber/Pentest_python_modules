#!/usr/bin/env python3
'''
Date : 1401/12/27
Author : AmirhosseinKhanshabani - @AmirZoyber
Description: Python Decorators are a powerful and useful tool in Python since it allows programmers to modify the behavior of function or class. Decorators allow us to wrap another function in order to extend the behavior of wrapped function, without permanently modifying it.
usage : ex for slowing down a bruteForce function. or verify if a token valid or not when performing an automated attack.
'''

# A simple example of decorator
from datetime import datetime
import time

def logger(func):
    def wrapper():
        print("-"*50)
        print("Start time: ", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        func()
        print("End time: ", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        print("-"*50)
    return wrapper

@logger
def demo_func():
    print("Executing task!")
    time.sleep(1)
    print("Task completed!")

demo_func()
logger(demo_func())

def logger_args(func):   # it can take arguments
    def wrapper(*args, **kwargs):
        print("-"*50)
        print("Start time: ", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        func(*args, **kwargs)
        print("End time: ", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        print("-"*50)
    return wrapper

def demo_func_args(*args, **kwargs):
    print("Executing task!")
    time.sleep(1)
    print("Task completed!")

demo_func_args(1) # will sleep 1 second
demo_func_args(2) # will sleep 2 second
