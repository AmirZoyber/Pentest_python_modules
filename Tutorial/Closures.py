#!/usr/bin/env python3
'''
Date : 1401/12/28
Author : AmirhosseinKhanshabani - @AmirZoyber
Description: Python Closures are a function object that remembers values in enclosing scopes even if they are not present in memory. It is a record that stores a function together with an environment: a mapping associating each free variable of the function (variables that are used locally, but defined in an enclosing scope) with the value or reference to which the name was bound when the closure was created.
usage : Closures are used to avoid the use of global values and provides some form of data hiding. It can also provide an object oriented solution to the problem.
'''

def print_out(a):
    print(f"Outer: {a}")
    def print_in():
        print(f"Inner: {a}")
    print_in()

print_out("test")   # output :
                        # Outer: test
                        # Inner: test


def print_out(a):
    print(f"Outer: {a}")
    def print_in():
        print(f"Inner: {a}")
    return print_in

print_out("test")   # output :
                        # Outer: test
# <function print_out.<locals>.print_in at 0x7f8b8c0b0d40>

test = print_out("test") 
test()             # output :
                        # Outer: test
                        # Inner: test

del print_out
test()             # output :
                        # Outer: test
                        # Inner: test
# because the print_out function is deleted from memory, but the print_in function is still in memory and can be called.

print(print_out("test"))         # output :
                                    # NameError: name 'print_out' is not defined
# because the print_out function is deleted from memory and it cant be called.

