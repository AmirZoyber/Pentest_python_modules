#!/usr/bin/env python3
'''
Date : 1401/12/18
Author : AmirhosseinKhanshabani - @AmirZoyber
Description: These are some useful functions for pwn challenges helps you to solve them faster.
             you can read more about pwntools here: 
                https://docs.pwntools.com/en/stable/
pip install pwn
'''
from pwn import *

print(shellcraft.sh()) # assembly code of execve("/bin/sh")
print(hexdump(shellcraft.sh())) # hexdump of execve("/bin/sh")

p = process('/bin/sh')    # run /bin/sh
p.sendline("echo hello;") # send a command to the shell
p.interactive()           # get an interactive shell
p.close()                 # close the shell


# interact with a remote process
# before running below code, run :
#                                    nc -lp 1234
r = remote('127.0.0.1', 1234)
r.sendline("hello world")
r.interactive()
r.close()

# packing and unpacking numbers (for exploits & passing data over the network)
p32(0xdeadbeef) # pack 32-bit number
hex(u32(p32(0xdeadbeef))) # unpack 32-bit number in hex

l = ELF('/bin/bash') # load an ELF file
print(hex(l.address)) # print the base address of the ELF file
hex(l.entry) # print the entry point of the ELF file

hex(l.got['write']) # print the address of the GOT entry for write

xor(0xdeadbeef, 0x1337) # xor two numbers

b64e(b"hello world") # base64 encode a string
b64d(b64e(b"hello world")) # base64 decode a string

md5sumhex(b"hello world") # md5sum hash a string
sha1sumhex(b"hello world") # sha1sum hash a string

print(bits(b'a')) # print the bits of a 
print(unbits(b'01100001')) # print the character of a bit string